Отчёт о тестировании API сервиса зоомагазина https://petstore.swagger.io/

1. Тестовые сценарии

1 Получение информации о товаре по ID
Метод: GET ; Эндпоинт: /pet/{petId} ; Ожидаемый результат: Возвращается информация о товаре в формате JSON.

2	Добавление нового товара	
Метод: POST ; Эндпоинт: /pet ; Ожидаемый результат:	Товар успешно добавлен, возвращается информация о товаре в формате JSON.

3	Обновление информации о товаре
Метод: PUT ; Эндпоинт:  /pet ; Ожидаемый результат: Информация о товаре успешно обновлена, возвращается обновленная информация в JSON.

4	Удаление товара по ID
Метод: DELETE	; Эндпоинт: /pet/{petId} ; Ожидаемый результат: Товар успешно удален, возвращается статус 200.

5	Получение списка товаров по статусу
Метод: GET ; Эндпоинт: /pet/findByStatus ; Ожидаемый результат: Возвращается список товаров с указанным статусом в формате JSON.

2. Методы тестирования и их обоснование

GET: Используется для получения данных. Это безопасный метод, который не изменяет состояние сервера.

POST: Используется для создания новых записей (товаров).

PUT: Используется для обновления существующих записей.

DELETE: Используется для удаления записей.

3. Тестовые данные

Для GET-запросов: petId = 1, status = available.

Для POST-запросов:

{
  "id": 123,
  "name": "Buddy",
  "status": "available"
}

Для PUT-запросов:

{
  "id": 123,
  "name": "Buddy",
  "status": "sold"
}

Для DELETE-запросов: petId = 123.

4. Примеры запросов и ответов

Сценарий 1: Получение информации о товаре по ID
Запрос:

curl -X GET "https://petstore.swagger.io/v2/pet/1"

Ответ:

{
  "id": 1,
  "name": "Buddy",
  "status": "available"
}

Сценарий 2: Добавление нового товара
Запрос:

curl -X POST "https://petstore.swagger.io/v2/pet" \
-H "Content-Type: application/json" \
-d '{"id": 123, "name": "Buddy", "status": "available"}'

Ответ:

{
  "id": 123,
  "name": "Buddy",
  "status": "available"
}

Сценарий 3: Обновление информации о товаре
Запрос:

curl -X PUT "https://petstore.swagger.io/v2/pet" \
-H "Content-Type: application/json" \
-d '{"id": 123, "name": "Buddy", "status": "sold"}'

Ответ:

{
  "id": 123,
  "name": "Buddy",
  "status": "sold"
}

Сценарий 4: Удаление товара по ID
Запрос:

curl -X DELETE "https://petstore.swagger.io/v2/pet/123"

Ответ: Статус 200.

Сценарий 5: Получение списка товаров по статусу
Запрос:

curl -X GET "https://petstore.swagger.io/v2/pet/findByStatus?status=available"

Ответ:

[
  {
    "id": 1,
    "name": "Buddy",
    "status": "available"
  },
  {
    "id": 2,
    "name": "Max",
    "status": "available"
  }
]

5. Анализ ответов

Все GET-запросы возвращают корректную информацию о товарах в формате JSON.

POST-запросы успешно создают новые товары.

PUT-запросы корректно обновляют информацию о товарах.

DELETE-запросы успешно удаляют товары.

Ответы соответствуют стандартам (JSON).

6. Выводы о работоспособности API

API сервиса зоомагазина работает корректно.

Все основные функции (получение, добавление, обновление, удаление) выполняются без ошибок.

Ответы соответствуют ожидаемым результатам.

Ошибки (например, 404 для несуществующего товара) обрабатываются корректно.

7. Рекомендации

Рекомендуется добавить тестирование на случаи передачи неверного формата данных, отсутствие обязательных полей.

8. Заключение

Тестирование API сервиса зоомагазина прошло успешно. Все тестовые сценарии выполнены, ошибок не обнаружено. API готов к использованию.
